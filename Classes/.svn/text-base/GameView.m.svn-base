//
//  GameView.m
//  Game_357
//
//  Created by Jareer Ahsan on 28/05/09.
//  Copyright 2009 LUMS. All rights reserved.
//

#import "GameView.h"


@implementation GameView

@synthesize gameEngine;
@synthesize _x1, _y1, _x2, _y2;
@synthesize updateMainViewDelegate;
//@synthesize startingColumns;

- (id)initWithFrame:(CGRect)frame 
{
	frame = CGRectMake(frame.origin.x, frame.origin.y, frame.size.height, frame.size.width);
	if (self = [super initWithFrame:frame]) 
	{
		self.backgroundColor = [UIColor clearColor];
		
		CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
		_gameContext = CGBitmapContextCreate(NULL, self.frame.size.width, self.frame.size.height, 4, 4 * self.frame.size.width, colorSpace, kCGImageAlphaPremultipliedFirst);
		
		CGColorSpaceRelease(colorSpace);
		
		_gameBaseLayer =  CGLayerCreateWithContext(_gameContext, self.frame.size, NULL);
		CGContextRef layerContext = CGLayerGetContext(_gameBaseLayer);
		CGContextSetLineWidth(layerContext, 5.0);
		CGContextSetLineCap(layerContext, kCGLineCapButt);
		CGContextSetRGBStrokeColor(layerContext, 1.0, 1.0, 1.0, 1.3);

		_gameCutLayer =  CGLayerCreateWithContext(_gameContext, self.frame.size, NULL);
		layerContext = CGLayerGetContext(_gameCutLayer);
		CGContextSetLineWidth(layerContext, 5.0);
		CGContextSetLineCap(layerContext, kCGLineCapButt);
		CGContextSetRGBStrokeColor(layerContext, 1.0, 1.0, 1.0, 1.3);

		_gameTempLayer =  CGLayerCreateWithContext(_gameContext, self.frame.size, NULL);
		layerContext = CGLayerGetContext(_gameTempLayer);
		CGContextSetLineWidth(layerContext, 5.0);
		CGContextSetLineCap(layerContext, kCGLineCapRound);
		CGContextSetRGBStrokeColor(layerContext, 1.0, 1.0, 1.0, 0.7);
		
		
		greenChalk = [UIImage imageNamed:@"greenchalk.png"];
		blueChalk = [UIImage imageNamed:@"bluechalk.png"];
		redChalk = [UIImage imageNamed:@"redchalk.png"];
		
		greenChalkView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, greenChalk.size.width, greenChalk.size.height)];
		blueChalkView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, blueChalk.size.width, blueChalk.size.height)];

		[greenChalkView setImage:greenChalk];
		[blueChalkView setImage:blueChalk];
		
		[self addSubview:greenChalkView];
		[self addSubview:blueChalkView];
		
		[self bringSubviewToFront:greenChalkView];
		[self bringSubviewToFront:blueChalkView];
		 
		gameEngine = [[GameEngine alloc] init];
	//	[gameEngine initialize:3 Columns:startingColumns];
	//	[self drawGameLines];
//		[self drawCutLines];
	}
	return self;
}


- (void)drawRect:(CGRect)rect {
	CGContextRef currentContext = UIGraphicsGetCurrentContext();
	CGImageRef image = CGBitmapContextCreateImage(_gameContext);
	CGContextDrawImage(currentContext, [self bounds], image);
	CGImageRelease(image);
	CGContextDrawLayerInRect(currentContext, [self bounds], _gameBaseLayer);	
	CGContextDrawLayerInRect(currentContext, [self bounds], _gameCutLayer);	
	CGContextDrawLayerInRect(currentContext, [self bounds], _gameTempLayer);	
//	[self drawGameLines];
}

- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {
	UITouch *touch = [touches anyObject];
	
//	if ([touch tapCount] == 2)
//	{
//		CGContextClearRect(CGLayerGetContext(_gameTempLayer), [self bounds]);
//		[self setNeedsDisplay];
//	}
//	else
//	{
	
		CGPoint location = [touch locationInView:self];
		_x1 = location.x;
		_y1 = location.y;
		[self touchesMoved:touches withEvent:event];
//	}
}

-(void) updateMainViewDelegateMethod:(id) sender
{
	if(updateMainViewDelegate != nil)
	{
		if([updateMainViewDelegate respondsToSelector:@selector(updateMainViewDelegateMethod:)])
		{
			[updateMainViewDelegate performSelector:@selector(updateMainViewDelegateMethod:)
								withObject:self];
		}
	}
}

- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
	[alertView release];
	[self removeFromSuperview];
	[self updateMainViewDelegateMethod:self];	
}


- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event {
	CGContextRef layerContext = CGLayerGetContext(_gameTempLayer);
	CGContextClearRect(layerContext, [self bounds]);
	
	UITouch *touch = [touches anyObject];
	CGPoint location = [touch locationInView:self];
	_x2 = location.x;
	_y2 = location.y;
	
	bool validMove = [gameEngine checkValidMove:_x1 :_y1 :_x2 :_y2];
	
	if (gameEngine.redTurn == TRUE)
	{
		if (validMove == TRUE)
			[greenChalkView setImage:greenChalk];
		else
			[greenChalkView setImage:redChalk];

		[greenChalkView setFrame:CGRectMake(_x2, _y2, greenChalkView.frame.size.width, greenChalkView.frame.size.height)];
	}
	else
	{
		if (validMove == TRUE)
			[blueChalkView setImage:blueChalk];
		else
			[blueChalkView setImage:redChalk];

		[blueChalkView setFrame:CGRectMake(_x2, _y2, blueChalkView.frame.size.width, blueChalkView.frame.size.height)];
	}
	//	CGPoint pastLocation = [touch previousLocationInView:self];
		
	CGContextBeginPath(layerContext);
	
	if (validMove == NO)
	{
		CGContextSetRGBStrokeColor(layerContext, 1.0, 0.0, 0.0, 0.8);
	}
	else 
	{
		if (gameEngine.redTurn == TRUE)
			CGContextSetRGBStrokeColor(layerContext, 0.0, 1.0, 0.0, 0.8);
		else
			CGContextSetRGBStrokeColor(layerContext, 0.0, 0.0, 1.0, 0.8);
	}
	CGContextMoveToPoint(layerContext, _x1, _y1);
	CGContextAddLineToPoint(layerContext, _x2, _y2);
	CGContextStrokePath(layerContext);
	
	[self setNeedsDisplay];
}

- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event {
//	CGContextDrawLayerInRect(UIGraphicsGetCurrentContext(), [self bounds], _myLayer);
	//	CGContextClearRect(CGLayerGetContext(_myLayer), [self bounds]);
	if ([gameEngine checkValidMove:_x1 :_y1 :_x2 :_y2] == YES)
		[gameEngine addCutLine:_x1 :_y1 :_x2 :_y2];
	
	[self drawGameLines];
	[self drawCutLines];
	CGContextRef layerContext = CGLayerGetContext(_gameTempLayer);
	CGContextClearRect(layerContext, [self bounds]);
		
	[self setNeedsDisplay];
	
	if([gameEngine gameState] == stateRedWins)
	{
		UIAlertView *palert = [[UIAlertView alloc] initWithTitle:@"Game ended" message:@"Blue Wins" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
		[palert show];
			
	}
	else if([gameEngine gameState] == stateBlueWins)
	{
		UIAlertView *palert = [[UIAlertView alloc] initWithTitle:@"Game ended" message:@"Green Wins" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
		[palert show];
					
	}
	
}

- (void)drawGameLines {

	CGContextClearRect(CGLayerGetContext(_gameBaseLayer), [self bounds]);

	NSMutableArray *gameLines = gameEngine.lineRows;
	
	CGContextRef layerContext = CGLayerGetContext(_gameBaseLayer);
	for (int i=0; i < gameEngine.rows; i++)
	{	
		NSMutableArray *gameLine = [gameLines objectAtIndex:i];
		int tempCols = gameEngine.cols + (i * 2);
		
		for (int j=0; j < tempCols; j++)
		{
			Line *tempLine = [gameLine objectAtIndex:j];
			
			CGContextBeginPath(layerContext);
			if (tempLine.lineState == stateRedTouched)
				CGContextSetRGBStrokeColor(layerContext, 0.0, 1.0, 0.0, 0.4);
			else if (tempLine.lineState == stateBlueTouched)
				CGContextSetRGBStrokeColor(layerContext, 0.0, 0.0, 1.0, 0.4);
			else
				CGContextSetRGBStrokeColor(layerContext, 1.0, 1.0, 1.0, 0.4);
			
			CGContextMoveToPoint(layerContext, tempLine._p1.x, tempLine._p1.y);
			CGContextAddLineToPoint(layerContext, tempLine._p2.x, tempLine._p2.y);
			CGContextStrokePath(layerContext);
		}
	}
	
	[self setNeedsDisplay];	
}

- (void)drawCutLines {

	CGContextRef layerContext = CGLayerGetContext(_gameCutLayer);
	CGContextClearRect(layerContext, [self bounds]);
	
	NSMutableArray *cutLines = gameEngine.cutLines;
	
	for (int i=0; i < gameEngine.cutCount; i++)
	{	
		Line *tempLine = [cutLines objectAtIndex:i];
		CGContextBeginPath(layerContext);
		if (tempLine.lineState == stateRedCutLine)
			CGContextSetRGBStrokeColor(layerContext, 0.0, 1.0, 0.0, 0.6);
		else
			CGContextSetRGBStrokeColor(layerContext, 0.0, 0.0, 1.0, 0.6);
		
		CGContextMoveToPoint(layerContext, tempLine._p1.x, tempLine._p1.y);
		CGContextAddLineToPoint(layerContext, tempLine._p2.x, tempLine._p2.y);
		CGContextStrokePath(layerContext);
	}
	[self setNeedsDisplay];		
}

- (void)dealloc {
	CGLayerRelease(_gameBaseLayer);
	CGContextRelease(_gameContext);
	[super dealloc];
}


@end
